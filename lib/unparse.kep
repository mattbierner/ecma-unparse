/**
 * @fileOverview Transforming an AST into a stream of tokens.
 */
package (
    unparse)
with
    import 'nu-stream::stream' stream#{NIL cons},
    
    import 'ecma-ast::token' token,
    import 'ecma-ast::node' node
in {

var slice = Array.prototype.slice;

/* Stream Utilities
 ******************************************************************************/
/**
 * Joins an array of objects into a stream with a stream joiner object.
 */
var joins = \arr, joiner -> 
    ?!arr.length
        :NIL
    :?arr.length === 1
        :arr.(0)
        :stream.append(
            arr.(0),
            stream.append(joiner, joins(arr.slice(1), joiner)));

/**
 * Joins an array of objects into a stream with a given joiner object.
 */
var join = \arr, joiner ->
    joins(arr, cons(joiner, NIL));

/* Token
 ******************************************************************************/
var keyword = \x -> 
    new token.KeywordToken(null, x);

var lineTerminator = \x ->
    new token.LineTerminatorToken(null, x);

var punctuator = \x ->
    new token.PunctuatorToken(null, x);

var whitespace = \x ->
    new token.WhitespaceToken(null, x);

var newLine = lineTerminator '\n';

var space = whitespace ' ';

/* 
 ******************************************************************************/
var seq = \args(...) -> {
    if (args.length === 0)
        return NIL;
    
    var first = args.(0),
        rest = seq.apply(undefined, slice.call(args, 1));

    if (first === undefined || stream.isEmpty(first))
        return rest;
    else if (stream.isStream(first))
        return stream.append(first, rest);
    else
        return stream.cons(first, rest);
};

/* 
 ******************************************************************************/
var statement = \args(...) ->
    seq(
        seq.apply(undefined, args),
        newLine);

var expression = \args(...) ->
    seq.apply(undefined, args);


var declaration = \args(...) ->
    seq.apply(undefined, args);

var clause = \args(...) ->
    seq(
        seq.apply(undefined, args),
        newLine);


var value = \args(...) ->
    seq.apply(undefined, args);

/* Value Unparsers
 ******************************************************************************/
var identifier = \name ->
    value(new token.IdentifierToken(null, name));

var string = \x ->
     value(new token.StringToken(null, x));

var number= \x ->
    value(new token.NumberToken(null, x));

var nil = \x ->
    value(new token.NullToken(null, x));

var boolean = \x ->
    value(new token.BooleanToken(null, x));

var regexp = \x ->
    value(new token.RegularExpressionToken(null, x));

/* Unparsing
 ******************************************************************************/
var program = \body ->
    seq.apply(undefined, body);

var variableDeclaration = \declarations ->
    statement(
        keyword 'var',
        space,
        join(declarations, punctuator ','),
        punctuator ';');

var variableDeclarator = \id, init ->
    declaration(
        id,
        ?init
            :seq(
                space,
                punctuator '=',
                space,
                init)
            :NIL);

var functionExpression = \id, params, body ->
    expression(
        punctuator '(',
        keyword 'function',
        ?id
            :seq(
                space,
                id)
            :NIL,
        punctuator '(',
        joins(params, seq(
            punctuator ',',
            space)),
        punctuator ')',
        space,
        body,
        punctuator ')');


var functionDeclaration = \id, params, body ->
    declaration(
        keyword 'function',
        space,
        punctuator '(',
        joins(params, seq(
            punctuator ',',
            space)),
        punctuator ')',
        space,
        body);
    
var switchCase = \test, consequent ->
    seq(
        ?test
            :seq(
                keyword 'case',
                space,
                test)
            :keyword 'default',
        punctuator ':',
            newLine,
            seq.apply(undefined, consequent));

var catchClause = \param, body -> 
    seq(
        keyword 'catch',
        punctuator '(',
        param,
        punctuator ')',
        body);

/* Statement Unparsing
 ******************************************************************************/
var emptyStatement = \() ->
    statement(
        punctuator ';');

var debuggerStatement = \() ->
    statement(
        keyword 'debugger',
        punctuator ';');

var blockStatement = \body ->
    statement(
        punctuator '{',
        newLine,
        seq.apply(undefined, body),
        punctuator '}');

var expressionStatement = \expression -> 
    statement(
        expression,
        punctuator ';');

var ifStatement = \test, consequent, alternate ->
    statement(
        keyword 'if',
        space,
        punctuator '(',
        test,
        punctuator ')',
        consequent,
        ?!alternate
            :NIL
            :seq(
                keyword 'else',
                space,
                alternate));

var labeledStatement = \label, body ->
    statement(
        identifier label,
        punctuator ':',
        body);

var breakStatement = \label ->
    statement(
        keyword 'break',
        space,
        label,
        punctuator ';');

var continueStatement = \label ->
    statement(
        keyword 'continue',
        space,
        label,
        punctuator ';');

var withStatement = \obj, body ->
    statement(
        keyword 'with',
        punctuator '(',
        obj,
        punctuator ')',
        punctuator '{',
        body,
        punctuator '}');

var switchStatement = \discriminant, cases ->
    statement(
        keyword 'switch',
        punctuator '(',
        discriminant,
        punctuator ')',
        punctuator '{',
        newLine,
        seq.apply(undefined, cases),
        punctuator '}');

var returnStatement = \argument ->
    statement(
        keyword 'return',
        space,
        argument,
        punctuator ';');

var throwStatement = \argument ->
    statement(
        keyword 'throw',
        space,
        argument,
        punctuator ';');

var tryStatement = \block, handler, finalizer ->
    statement(
        keyword 'try',
        block,
        ?handler
            :handler
            :NIL,
        ?finalizer
            :seq(
                keyword 'finally',
                finalizer)
            :NIL);

var whileStatement = \test, body -> 
    statement(
        keyword 'while',
        punctuator '(',
        test,
        punctuator ')',
        body);

var doWhileStatement = \body, test ->
    statement(
        keyword 'do',
        body,
        keyword 'while',
        punctuator '(',
        test,
        punctuator ')',
        punctuator ';');

var forDeclarationStatement = \init, test, update, body ->
    statement(
        keyword 'for',
        punctuator '(',
        init,
        space,
        test,
        punctuator ';',
        update,
        punctuator ')',
        body);

var forStatement = \init, test, update, body ->
    statement(
        keyword 'for',
        punctuator '(',
        init,
        punctuator ';',
        test,
        punctuator ';',
        update,
        punctuator ')',
        body);

var forInStatement = \left, right ->
    statement(
        keyword 'for',
        punctuator '(',
        node.left,
        punctuator 'in',
        node.right,
        punctuator ')',
        node.body);

/* Expression Unparsing
 ******************************************************************************/
var thisExpression = \() ->
    expression(
        keyword 'this');

var sequenceExpression = \expressions -> 
    expression(
        punctuator '(',
        join(expressions, punctuator ','),
        punctuator ')');

var unaryExpression = \op, arg ->
    expression(
        punctuator '(',
        op,
        space,
        arg,
        punctuator ')');

var binaryExpression = \op, left, right ->
    expression(
        punctuator '(',
        left,
        space,
        op,
        space,
        right,
        punctuator ')');
    
var updateExpression = \op, arg, prefix ->
    ?prefix
        :expression(op, arg)
        :expression(arg, op);

var conditionalExpression = \test, consequent, alternate ->
    expression(
        punctuator '(',
        test,
        space,
        punctuator '?',
        space,
        consequent,
        space,
        punctuator ':',
        space,
        alternate,
        punctuator ')');

var newExpression = \callee, args ->
    expression(
        keyword 'new',
        space,
        punctuator '(',
        callee,
        punctuator ')',
        ?args
            :seq(
                punctuator '(',
                joins(args, seq(
                    punctuator ',',
                    space)),
                punctuator ')')
            :NIL);

var callExpression = \callee, args ->
    expression(
        callee,
        punctuator '(',
        joins(args, seq(
            punctuator ',',
            space)),
        punctuator ')');

var memberExpression = \obj, property, computed ->
    ?computed
        :expression(
            obj,
            punctuator '[',
            property,
            punctuator ']')
        :expression(
            obj,
            punctuator '.',
            property);
 
var arrayExpression = \elements ->
    expression(
        punctuator '[',
        joins(elements, seq(
            punctuator ',',
            space)),
        punctuator ']');

var objectExpression = \props ->
     expression(
        punctuator '(',
        punctuator '{',
        ?props && props.length
            :seq(
                newLine,
                joins(props, seq(
                    punctuator ',',
                    newLine)),
                newLine)
            :NIL,
        punctuator '}',
        punctuator ')');

var objectGetExpression = \key, body ->
    seq(
        identifier 'get',
        space,
        key,
        punctuator '(',
        punctuator ')',
        space,
        body);

var objectSetExpression = \key, params, body ->
    seq(
        identifier 'set',
        space,
        key,
        punctuator '(',
        seq.apply(undefined, params),
        punctuator ')',
        space,
        body);

var objectValueExpression = \key, value ->
    seq(
        key,
        punctuator ':',
        space,
        value);

/* Unparsing
 ******************************************************************************/
var rewrites = {};

var addRewrite = \type, check -> {
    if (Array.isArray(type))
        type.forEach <|\x -> addRewrite(x, check);
    else
        rewrites.(type) = check;
};

var _unparse;

// Clauses
addRewrite@'SwitchCase' <|
    \node ->
        switchCase(
            ?node.test
                :_unparse(node.test)
                :null,
            _unparse(node.consequent));
   
addRewrite@'CatchClause' <|
    \node ->
        catchClause(
            _unparse(node.param),
            _unparse(node.body));

// Statement
addRewrite@'EmptyStatement' <|
    emptyStatement;

addRewrite@'DebuggerStatement' <|
    debuggerStatement;

addRewrite@'BlockStatement' <|
    \node ->
        blockStatement(
            _unparse(node.body));
    
addRewrite@'ExpressionStatement' <|
    \node ->
        expressionStatement(
            _unparse(node.expression));

addRewrite@'IfStatement' <|
    \node ->
        ifStatement(
            _unparse(node.test),
            _unparse(node.consequent),
            ?node.alternate
                :_unparse(node.alternate)
                :null);
    
addRewrite@'LabeledStatement' <|
    \node ->
        labeledStatement(
            _unparse(node.label),
            _unparse(node.body));
    
addRewrite@'BreakStatement' <|
    \node ->
        breakStatement(
            _unparse(node.label));
    
addRewrite@'ContinueStatement' <|
    \node -> 
        continueStatement(
            _unparse(node.label));
    
addRewrite@'WithStatement' <|
    \node ->
        withStatement(
            _unparse(node.object),
            _unparse(node.body));

addRewrite@'SwitchStatement' <|
    \node ->
        switchStatement(
            _unparse(node.discriminant),
            node.cases.map(_unparse));

addRewrite@'ReturnStatement' <|
    \node ->
        returnStatement(
            _unparse(node.argument));

addRewrite@'ThrowStatement' <|
    \node ->
        throwStatement(
            _unparse(node.argument));

addRewrite@'TryStatement' <|
    \node ->
        tryStatement(
            _unparse(node.block),
            ?node.handler
                :_unparse(node.handler)
                :null,
            ?node.finalizer
                :_unparse(node.finalizer)
                :null);

addRewrite@'WhileStatement' <|
    \node ->
        whileStatement(
            _unparse(node.test),
            _unparse(node.body));

addRewrite@'DoWhileStatement' <|
    \node ->
        doWhileStatement(
            _unparse(node.body),
            _unparse(node.test));

addRewrite@'ForStatement' <|
    \node -> let
        init = ?node.init :_unparse(node.init) :null,
        test = ?node.test :_unparse(node.test) :null,
        update = ?node.update :_unparse(node.update) :null,
        body = _unparse(node.body)
    in
        ?node.init && node.init.type ===  "VariableDeclaration"
            :forDeclarationStatement(init, test, update, body)
            :forStatement(init, test, update, body);
    
addRewrite@'ForInStatement' <|
    \node ->
        forInStatement(
            _unparse(node.left),
            _unparse(node.right),
            _unparse(node.body));

// Expression
addRewrite@'ThisExpression' <|
    \node ->
        thisExpression();

addRewrite@'SequenceExpression' <|
    \node ->
        sequenceExpression(
            _unparse(node.expressions));

addRewrite@'UnaryExpression' <|
    \node ->
        unaryExpression(
            punctuator node.operator,
            _unparse(node.argument));
    
addRewrite@['BinaryExpression', 'LogicalExpression', 'AssignmentExpression'] <|
    \node ->
        binaryExpression(
            punctuator node.operator,
            _unparse(node.left),
            _unparse(node.right));

addRewrite@'UpdateExpression' <|
    \node ->
        updateExpression(
            punctuator node.operator,
            _unparse(node.argument),
            node.prefix);
    
addRewrite@'ConditionalExpression' <|
    \node ->
        conditionalExpression(
            _unparse(node.test),
            _unparse(node.consequent),
            _unparse(node.alternate));

addRewrite@'NewExpression' <|
    \node ->
        newExpression(
            _unparse(node.callee),
            _unparse(node.args));

addRewrite@'CallExpression' <|
    \node ->
        callExpression(
            _unparse(node.callee),
            node.args.map(_unparse));
    
addRewrite@'MemberExpression' <|
    \node ->
        memberExpression(
            _unparse(node.object),
            _unparse(node.property),
            node.computed);
    
addRewrite@'ArrayExpression' <|
    \node ->
        arrayExpression(
            _unparse(node.elements));

addRewrite@'ObjectExpression' <|
    \node ->
        objectExpression(
            _unparse(node.properties));

addRewrite@'ObjectValue' <|
    \node ->
        objectValueExpression(
            _unparse(node.key),
            _unparse(node.value));

addRewrite@'ObjectGetter' <|
    \node ->
        objectGetExpression(
            _unparse(node.key),
            _unparse(node.value.body));
    
addRewrite@'ObjectSetter' <|
    \node ->
        objectSetExpression(
            _unparse(node.key),
            _unparse(node.value.params),
            _unparse(node.value.body));

// Function
addRewrite@'FunctionExpression' <|
    \node ->
        functionExpression(
            _unparse(node.id),
            _unparse(node.params),
            _unparse(node.body));
    
addRewrite@'FunctionDeclaration' <|
    \node ->
        functionDeclaration(
            _unparse(node.id),
            _unparse(node.params),
            _unparse(node.body));

// Program
addRewrite@'Program' <|
    \node ->  program(node.body.map(_unparse));

// Declarations
addRewrite@'VariableDeclaration' <|
    \node ->
        variableDeclaration(
            _unparse(node.declarations));
    
addRewrite@'VariableDeclarator' <|
    \node ->
        variableDeclarator(
            _unparse(node.id),
            ?node.init
                :_unparse(node.init)
                :null);

// Values
addRewrite@'Identifier' <|
    \node ->
        identifier node.name;

addRewrite@'Literal' <|
    \node -> {
        switch (node.kind) {
        case 'string':
            return string(node.value);
        case 'number':
            return number(node.value);
        case 'null':
            return nil(node.value);
        case 'boolean':
            return boolean(node.value);
        case 'regexp':
            return regexp(node.value);
        default:
            return NIL;
        }
    };

/**
 * Transforms a AST node to a stream of tokens.
 */
_unparse = \node -> {
    if (!node)
        return NIL;
    
    if (Array.isArray(node))
        return node.map(_unparse);
    
    var rewrite := rewrites.(node.type);
    if (rewrite)
        return rewrite(node);
    
    return NIL;
    
};

/* Exported
 ******************************************************************************/


/**
 * Transform an AST to a stream of tokens.
 * 
 * Returned stream inserts line terminators for pretty printing.
 * 
 * @param node Root of AST to unparse.
 * 
 * @return Stream of parse-ecma lex tokens.
 */
unparse = _unparse;

}