/**
 * @fileOverview Transforming an AST into a stream of tokens.
 */
package (
    unparse)
with
    import 'nu-stream::stream' stream,
    import 'nu-stream::gen' gen,
    
    import 'ecma-ast::token' token,
    import 'ecma-ast::node' node
in {

var slice = Array.prototype.slice;

/* Stream Utilities
 ******************************************************************************/
/**
 * Joins an array of objects into a stream with a given joiner object.
 */
var join = \arr, joiner -> {
    if (arr.length === 0)
        return stream.end;
    else if (arr.length === 1) 
        return arr.(0);
    else 
        return stream.append(arr.(0), stream.cons(joiner, join(arr.slice(1), joiner)));
};

/**
 * Joins an array of objects into a stream with a stream joiner object.
 */
var joins = \arr, joiner -> {
    if (arr.length === 0) 
        return stream.end;
    else if (arr.length === 1)
        return arr.(0);
    else
        return stream.append(arr.(0), stream.append(joiner, joins(arr.slice(1), joiner)));
};

/* Token
 ******************************************************************************/
var keyword = \x -> 
    new token.KeywordToken(null, x);

var lineTerminator = \x ->
    new token.LineTerminatorToken(null, x || '\n');

var punctuator = \x ->
    new token.PunctuatorToken(null, x);

var whitespace = \x ->
    new token.WhitespaceToken(null, x || ' ');

/* 
 ******************************************************************************/
var seq = \args(...) -> {
    if (args.length === 0)
        return stream.end;
    
    var first = args.(0),
        rest = seq.apply(undefined, slice.call(args, 1));

    if (first === undefined || stream.isEmpty(first))
        return rest;
    else if (stream.isStream(first))
        return stream.append(first, rest);
    else
        return stream.cons(first, rest);
};

/* 
 ******************************************************************************/
var statement = \args(...) ->
    seq(
        seq.apply(undefined, args),
        lineTerminator());

var expression = \args(...) ->
    seq.apply(undefined, args);


var declaration = \args(...) ->
    seq.apply(undefined, args);

var clause = \args(...) ->
    seq(
        seq.apply(undefined, args),
        lineTerminator());


var value = \args(...) ->
    seq.apply(undefined, args);

/* Value Unparsers
 ******************************************************************************/
var identifier = \name ->
    value(new token.IdentifierToken(null, name));

var string = \x ->
     value(new token.StringToken(null, x));

var number= \x ->
    value(new token.NumberToken(null, x));

var nil = \x ->
    value(new token.NullToken(null, x));

var boolean = \x ->
    value(new token.BooleanToken(null, x));

var regexp = \x ->
    value(new token.RegularExpressionToken(null, x));

/* Unparsing
 ******************************************************************************/
var program = \body ->
    seq.apply(undefined, body);

var variableDeclaration = \declarations ->
    statement(
        keyword('var'),
        whitespace(),
        join(declarations, punctuator(',')),
        punctuator(';'));

var variableDeclarator = \id, init ->
    declaration(
        id,
        ?init
            :seq(
                whitespace(),
                punctuator('='),
                whitespace(),
                init)
            :stream.end);

var functionExpression = \id, params, body ->
    expression(
        punctuator('('),
        keyword('function'),
        ?id
            :seq(
                whitespace(),
                id)
            :stream.end,
        punctuator('('),
        joins(params, seq(
            punctuator(','),
            whitespace())),
        punctuator(')'),
        whitespace(),
        body,
        punctuator(')'));


var functionDeclaration = \id, params, body ->
    declaration(
        keyword('function'),
        whitespace(),
        punctuator('('),
        joins(params, seq(
            punctuator(','),
            whitespace())),
        punctuator(')'),
        whitespace(),
        body);
    
var switchCase = \test, consequent ->
    seq(
        ?test
            :seq(
                keyword('case'),
                whitespace(),
                test)
            :keyword('default'),
        punctuator(':'),
            lineTerminator(),
            seq.apply(undefined, consequent));

var catchClause = \param, body -> 
    seq(
        keyword('catch'),
        punctuator('('),
        param,
        punctuator(')'),
        body);

/* Statement Unparsing
 ******************************************************************************/
var emptyStatement = \() ->
    statement(
        punctuator(';'));

var debuggerStatement = \() ->
    statement(
        keyword('debugger'),
        punctuator(';'));

var blockStatement = \body ->
    statement(
        punctuator('{'),
        lineTerminator(),
        seq.apply(undefined, body),
        punctuator('}'));

var expressionStatement = \expression -> 
    statement(
        expression,
        punctuator(';'));

var ifStatement = \test, consequent, alternate ->
    statement(
        keyword('if'),
        whitespace(),
        punctuator('('),
        test,
        punctuator(')'),
        consequent,
        ?!alternate
            :stream.end
            :seq(
                keyword('else'),
                whitespace(),
                alternate));

var labeledStatement = \label, body ->
    statement(
        identifier(label),
        punctuator(':'),
        body);

var breakStatement = \label ->
    statement(
        keyword('break'),
        whitespace(),
        label,
        punctuator(';'));

var continueStatement = \label ->
    statement(
        keyword('continue'),
        whitespace(),
        label,
        punctuator(';'));

var withStatement = \obj, body ->
    statement(
        keyword('with'),
        punctuator('('),
        obj,
        punctuator(')'),
        punctuator('{'),
        body,
        punctuator('}'));

var switchStatement = \discriminant, cases ->
    statement(
        keyword('switch'),
        punctuator('('),
        discriminant,
        punctuator(')'),
        punctuator('{'),
        lineTerminator(),
        seq.apply(undefined, cases),
        punctuator('}'));

var returnStatement = \argument ->
    statement(
        keyword('return'),
        whitespace(),
        argument,
        punctuator(';'));

var throwStatement = \argument ->
    statement(
        keyword('throw'),
        whitespace(),
        argument,
        punctuator(';'));

var tryStatement = \block, handler, finalizer ->
    statement(
        keyword('try'),
        block,
        ?handler
            :handler
            :stream.end,
        ?finalizer
            :seq(
                keyword('finally'),
                finalizer)
            :stream.end);

var whileStatement = \test, body -> 
    statement(
        keyword('while'),
        punctuator('('),
        test,
        punctuator(')'),
        body);

var doWhileStatement = \body, test ->
    statement(
        keyword('do'),
        body,
        keyword('while'),
        punctuator('('),
        test,
        punctuator(')'),
        punctuator(';'));

var forDeclarationStatement = \init, test, update, body ->
    statement(
        keyword('for'),
        punctuator('('),
        init,
        whitespace(),
        test,
        punctuator(';'),
        update,
        punctuator(')'),
        body);

var forStatement = \init, test, update, body ->
    statement(
        keyword('for'),
        punctuator('('),
        init,
        punctuator(';'),
        test,
        punctuator(';'),
        update,
        punctuator(')'),
        body);

var forInStatement = \left, right ->
    statement(
        keyword('for'),
        punctuator('('),
        node.left,
        punctuator('in'),
        node.right,
        punctuator(')'),
        node.body);


/* Expression Unparsing
 ******************************************************************************/
var thisExpression = \() ->
    expression(
        keyword('this'));


var sequenceExpression = \expressions -> 
    expression(
        join(expressions, punctuator(',')));

var unaryExpression = \op, arg ->
    expression(
        punctuator('('),
        op,
        whitespace(),
        arg,
        punctuator(')'));

var binaryExpression = \op, left, right ->
    expression(
        punctuator('('),
        left,
        whitespace(),
        op,
        whitespace(),
        right,
        punctuator(')'));
    
var updateExpression = \op, arg, prefix ->
    ?prefix
        :expression(op, arg)
        :expression(arg, op);

var conditionalExpression = \test, consequent, alternate ->
    expression(
        punctuator('('),
        test,
        whitespace(),
        punctuator('?'),
        whitespace(),
        consequent,
        whitespace(),
        punctuator(':'),
        whitespace(),
        alternate,
        punctuator(')'));

var newExpression = \callee, args ->
    expression(
        keyword('new'),
        whitespace(),
        punctuator('('),
        callee,
        punctuator(')'),
        ?args
            :seq(
                punctuator('('),
                joins(args, seq(
                    punctuator(','),
                    whitespace())),
                punctuator(')'))
            :stream.end);

var callExpression = \callee, args ->
    expression(
        callee,
        punctuator('('),
        joins(args, seq(
            punctuator(','),
            whitespace())),
        punctuator(')'));

var memberExpression = \obj, property, computed ->
    ?computed
        :expression(
            obj,
            punctuator('['),
            property,
            punctuator(']'))
        :expression(
            obj,
            punctuator('.'),
                property);
 
var arrayExpression = \elements ->
    expression(
        punctuator('['),
        joins(elements, seq(
            punctuator(','),
            whitespace())),
        punctuator(']'));

var objectExpression = \props ->
     expression(
        punctuator('('),
        punctuator('{'),
        ?props && props.length
            :seq(
                lineTerminator(),
                joins(props, seq(
                    punctuator(','),
                    lineTerminator())),
                lineTerminator())
            :stream.end,
        punctuator('}'),
        punctuator(')'));

var objectGetExpression = \key, body ->
    seq(
        identifier('get'),
        whitespace(),
        key,
        punctuator('('),
        punctuator(')'),
        whitespace(),
        body);

var objectSetExpression = \key, params, body ->
    seq(
        identifier('set'),
        whitespace(),
        key,
        punctuator('('),
        seq.apply(undefined, params),
        punctuator(')'),
        whitespace(),
        body);

var objectValueExpression = \key, value ->
    seq(
        key,
        punctuator(':'),
        whitespace(),
        value);



/* Unparsing
 ******************************************************************************/
/**
 * Transforms a AST node to a stream of tokens.
 */
var _unparse = \node -> {
    if (!node)
        return stream.end;
        
    switch (node.type) {
// clauses
    case 'SwitchCase':
        return switchCase(
            ?node.test
                :_unparse(node.test)
                :null,
            node.consequent.map(_unparse));
   
    case 'CatchClause':
        return catchClause(
            _unparse(node.param),
            _unparse(node.body));
    
// Statement
    case 'EmptyStatement':
        return emptyStatement();
        
    case 'DebuggerStatement':
        return debuggerStatement();
    
    case 'BlockStatement':
        return blockStatement(
            node.body.map(_unparse));
        
    case 'ExpressionStatement':
        return expressionStatement(
            _unparse(node.expression));
    
    case 'IfStatement':
        return ifStatement(
            _unparse(node.test),
            _unparse(node.consequent),
            ?node.alternate
                :_unparse(node.alternate)
                :null);
        
    case 'LabeledStatement':
        return labeledStatement(
            _unparse(node.label),
            _unparse(node.body));
        
    case 'BreakStatement':
        return breakStatement(
           _unparse(node.label));
        
    case 'ContinueStatement':
        return continueStatement(
            _unparse(node.label));
        
    case 'WithStatement':
        return withStatement(
            _unparse(node.object),
            _unparse(node.body));
    
    case 'SwitchStatement':
        return switchStatement(
            _unparse(node.discriminant),
            node.cases.map(_unparse));
    
    case'ReturnStatement':
        return returnStatement(
            _unparse(node.argument));
    
    case 'ThrowStatement':
        return throwStatement(
            _unparse(node.argument));
    
    case 'TryStatement':
        return tryStatement(
            _unparse(node.block),
            ?node.handler
                :_unparse(node.handler)
                :null,
            ?node.finalizer
                :_unparse(node.finalizer)
                :null);
    
    case 'WhileStatement':
        return whileStatement(
            _unparse(node.test),
            _unparse(node.body));
    
    case 'DoWhileStatement':
        return doWhileStatement(
            _unparse(node.body),
            _unparse(node.test));
    
    case 'ForStatement':
        var init = ?node.init :_unparse(node.init) :null;
        var test = ?node.test :_unparse(node.test) :null;
        var update = ?node.update :_unparse(node.update) :null;
        var body = _unparse(node.body);
        return ?node.init && node.init.type ===  "VariableDeclaration"
            :forDeclarationStatement(init, test, update, body)
            :forStatement(init, test, update, body);
        
    case 'ForInStatement':
        return forInStatement(
            _unparse(node.left),
            _unparse(node.right),
            _unparse(node.body));
        
// Expression
    case 'ThisExpression':
        return thisExpression();

    case 'SequenceExpression':
        return sequenceExpression(node.expressions.map(_unparse));
    
    case 'UnaryExpression':
        return unaryExpression(
            punctuator(node.operator),
            _unparse(node.argument));
        
    case 'BinaryExpression':
    case 'LogicalExpression':
    case 'AssignmentExpression':
        return binaryExpression(
            punctuator(node.operator),
            _unparse(node.left),
            _unparse(node.right));

    case 'UpdateExpression':
        return updateExpression(
            punctuator(node.operator),
            _unparse(node.argument),
            node.prefix);
        
    case 'ConditionalExpression':
        return conditionalExpression(
            _unparse(node.test),
            _unparse(node.consequent),
            _unparse(node.alternate));
    
    case 'NewExpression':
        return newExpression(
            _unparse(node.callee),
            ?node.args
                :node.args.map(_unparse)
                :null);
    
    case 'CallExpression':
        return callExpression(
            _unparse(node.callee),
            node.args.map(_unparse));
        
    case 'MemberExpression':
        return memberExpression(
            _unparse(node.object),
            _unparse(node.property),
            node.computed);
        
    case 'ArrayExpression':
        return arrayExpression(node.elements.map(_unparse));
    
    case 'ObjectExpression':
        return objectExpression(node.properties.map(_unparse));
    
    case 'ObjectValue':
        return objectValueExpression(_unparse(node.key), _unparse(node.value));
    
    case 'ObjectGetter':
        return objectGetExpression(_unparse(node.key), _unparse(node.value.body));
        
    case 'ObjectSetter':
        return objectSetExpression(_unparse(node.key), node.value.params.map(_unparse), _unparse(node.value.body));

// Function
    case 'FunctionExpression':
        return functionExpression(
            ?node.id
                :_unparse(node.id)
                :null,
            node.params.map(_unparse),
            _unparse(node.body));
        
    case 'FunctionDeclaration':
        return functionDeclaration(
            _unparse(node.id),
            node.params.map(_unparse),
            _unparse(node.body));

// Program
    case 'Program':
        return program(node.body.map(_unparse));

// Declarations
    case 'VariableDeclaration':
        return variableDeclaration(node.declarations.map(_unparse));
        
    case 'VariableDeclarator':
        return variableDeclarator(
            _unparse(node.id),
            ?node.init
                :_unparse(node.init)
                :null);

// Value
    case 'Identifier':
        return identifier(node.name);
    
    case 'Literal':
        switch (node.kind) {
        case 'string':
            return string(node.value);
        case 'number':
            return number(node.value);
        case 'null':
            return nil(node.value);
        case 'boolean':
            return boolean(node.value);
        case 'regexp':
            return regexp(node.value);
        default:
            return stream.end;
        }
        
    default:
        return stream.end;
    }
};

/* Exported
 ******************************************************************************/


/**
 * Transform an AST to a stream of tokens.
 * 
 * Returned stream inserts line terminators for pretty printing.
 * 
 * @param node Root of AST to unparse.
 * 
 * @return Stream of parse-ecma lex tokens.
 */
unparse = _unparse;

}